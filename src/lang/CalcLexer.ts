// Generated from ./src/lang/Calc.g4 by ANTLR 4.9.0-SNAPSHOT

import { ATN } from 'antlr4ts/atn/ATN'
import { ATNDeserializer } from 'antlr4ts/atn/ATNDeserializer'
import { LexerATNSimulator } from 'antlr4ts/atn/LexerATNSimulator'
import { CharStream } from 'antlr4ts/CharStream'
import { NotNull } from 'antlr4ts/Decorators'
import { Override } from 'antlr4ts/Decorators'
import { Lexer } from 'antlr4ts/Lexer'
import * as Utils from 'antlr4ts/misc/Utils'
import { RuleContext } from 'antlr4ts/RuleContext'
import { Vocabulary } from 'antlr4ts/Vocabulary'
import { VocabularyImpl } from 'antlr4ts/VocabularyImpl'

export class CalcLexer extends Lexer {
  public static readonly T__0 = 1
  public static readonly T__1 = 2
  public static readonly T__2 = 3
  public static readonly T__3 = 4
  public static readonly T__4 = 5
  public static readonly T__5 = 6
  public static readonly T__6 = 7
  public static readonly T__7 = 8
  public static readonly T__8 = 9
  public static readonly T__9 = 10
  public static readonly T__10 = 11
  public static readonly T__11 = 12
  public static readonly T__12 = 13
  public static readonly T__13 = 14
  public static readonly T__14 = 15
  public static readonly T__15 = 16
  public static readonly T__16 = 17
  public static readonly T__17 = 18
  public static readonly T__18 = 19
  public static readonly T__19 = 20
  public static readonly T__20 = 21
  public static readonly T__21 = 22
  public static readonly T__22 = 23
  public static readonly T__23 = 24
  public static readonly T__24 = 25
  public static readonly T__25 = 26
  public static readonly INTEGER_LITERAL = 27
  public static readonly BOOLEAN_LITERAL = 28
  public static readonly REAL_LITERAL = 29
  public static readonly STRING_LITERAL = 30
  public static readonly UNIT_LITERAL = 31
  public static readonly TYPE = 32
  public static readonly IDENTIFIER = 33
  public static readonly WHITESPACE = 34

  // tslint:disable:no-trailing-whitespace
  public static readonly channelNames: string[] = ['DEFAULT_TOKEN_CHANNEL', 'HIDDEN']

  // tslint:disable:no-trailing-whitespace
  public static readonly modeNames: string[] = ['DEFAULT_MODE']

  public static readonly ruleNames: string[] = [
    'T__0',
    'T__1',
    'T__2',
    'T__3',
    'T__4',
    'T__5',
    'T__6',
    'T__7',
    'T__8',
    'T__9',
    'T__10',
    'T__11',
    'T__12',
    'T__13',
    'T__14',
    'T__15',
    'T__16',
    'T__17',
    'T__18',
    'T__19',
    'T__20',
    'T__21',
    'T__22',
    'T__23',
    'T__24',
    'T__25',
    'INTEGER_LITERAL',
    'BOOLEAN_LITERAL',
    'REAL_LITERAL',
    'STRING_LITERAL',
    'UNIT_LITERAL',
    'TYPE',
    'SYMBOLIC_IDENTIFIER',
    'ALPHANUMERIC_IDENTIFIER',
    'IDENTIFIER',
    'WHITESPACE'
  ]

  private static readonly _LITERAL_NAMES: Array<string | undefined> = [
    undefined,
    "':'",
    "'*'",
    "'/'",
    "'div'",
    "'mod'",
    "'+'",
    "'-'",
    "'<>'",
    "'<'",
    "'>'",
    "'<='",
    "'>='",
    "'='",
    "'andalso'",
    "'orelse'",
    "'^'",
    "'if'",
    "'then'",
    "'else'",
    "'fn'",
    "'=>'",
    "'('",
    "')'",
    "'val'",
    "'fun'",
    "';'",
    undefined,
    undefined,
    undefined,
    undefined,
    "'()'"
  ]
  private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    'INTEGER_LITERAL',
    'BOOLEAN_LITERAL',
    'REAL_LITERAL',
    'STRING_LITERAL',
    'UNIT_LITERAL',
    'TYPE',
    'IDENTIFIER',
    'WHITESPACE'
  ]
  public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(
    CalcLexer._LITERAL_NAMES,
    CalcLexer._SYMBOLIC_NAMES,
    []
  )

  // @Override
  // @NotNull
  public get vocabulary(): Vocabulary {
    return CalcLexer.VOCABULARY
  }
  // tslint:enable:no-trailing-whitespace

  constructor(input: CharStream) {
    super(input)
    this._interp = new LexerATNSimulator(CalcLexer._ATN, this)
  }

  // @Override
  public get grammarFileName(): string {
    return 'Calc.g4'
  }

  // @Override
  public get ruleNames(): string[] {
    return CalcLexer.ruleNames
  }

  // @Override
  public get serializedATN(): string {
    return CalcLexer._serializedATN
  }

  // @Override
  public get channelNames(): string[] {
    return CalcLexer.channelNames
  }

  // @Override
  public get modeNames(): string[] {
    return CalcLexer.modeNames
  }

  public static readonly _serializedATN: string =
    '\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02$\u0102\b\x01' +
    '\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06' +
    '\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r' +
    '\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t' +
    '\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t' +
    '\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t' +
    '\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04"\t' +
    '"\x04#\t#\x04$\t$\x04%\t%\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03' +
    '\x04\x03\x05\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03' +
    '\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03' +
    '\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F' +
    '\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x10' +
    '\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x03\x13' +
    '\x03\x13\x03\x13\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14' +
    '\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18' +
    '\x03\x18\x03\x19\x03\x19\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1A\x03\x1A' +
    '\x03\x1B\x03\x1B\x03\x1C\x06\x1C\xA0\n\x1C\r\x1C\x0E\x1C\xA1\x03\x1D\x03' +
    '\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x05\x1D\xAD' +
    '\n\x1D\x03\x1E\x06\x1E\xB0\n\x1E\r\x1E\x0E\x1E\xB1\x03\x1E\x05\x1E\xB5' +
    '\n\x1E\x03\x1E\x06\x1E\xB8\n\x1E\r\x1E\x0E\x1E\xB9\x03\x1E\x03\x1E\x05' +
    '\x1E\xBE\n\x1E\x03\x1E\x06\x1E\xC1\n\x1E\r\x1E\x0E\x1E\xC2\x05\x1E\xC5' +
    '\n\x1E\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x07\x1F\xCB\n\x1F\f\x1F\x0E\x1F' +
    '\xCE\v\x1F\x03\x1F\x03\x1F\x03 \x03 \x03 \x03!\x03!\x03!\x03!\x03!\x03' +
    '!\x03!\x03!\x03!\x03!\x03!\x03!\x03!\x03!\x03!\x03!\x03!\x03!\x03!\x03' +
    '!\x03!\x05!\xEA\n!\x03"\x06"\xED\n"\r"\x0E"\xEE\x03#\x03#\x07#\xF3' +
    '\n#\f#\x0E#\xF6\v#\x03$\x03$\x05$\xFA\n$\x03%\x06%\xFD\n%\r%\x0E%\xFE' +
    '\x03%\x03%\x02\x02\x02&\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06' +
    '\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19' +
    '\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14' +
    "'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x191\x02\x1A3\x02\x1B5\x02" +
    '\x1C7\x02\x1D9\x02\x1E;\x02\x1F=\x02 ?\x02!A\x02"C\x02\x02E\x02\x02G' +
    '\x02#I\x02$\x03\x02\f\x03\x022;\x03\x0200\x04\x02GGgg\x03\x02\x80\x80' +
    '\x04\x02$$^^\x06\x02\f\f\x0F\x0F$$^^\v\x02##%),1<<>B^^``~~\x80\x80\x04' +
    '\x02C\\c|\x07\x02))2;C\\aac|\x05\x02\v\f\x0F\x0F""\x02\u0111\x02\x03' +
    '\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t' +
    '\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03' +
    '\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03' +
    '\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03' +
    '\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03' +
    "\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02'\x03\x02\x02" +
    '\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02' +
    '/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02' +
    '\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02' +
    '\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03\x02\x02\x02\x02G\x03' +
    '\x02\x02\x02\x02I\x03\x02\x02\x02\x03K\x03\x02\x02\x02\x05M\x03\x02\x02' +
    '\x02\x07O\x03\x02\x02\x02\tQ\x03\x02\x02\x02\vU\x03\x02\x02\x02\rY\x03' +
    '\x02\x02\x02\x0F[\x03\x02\x02\x02\x11]\x03\x02\x02\x02\x13`\x03\x02\x02' +
    '\x02\x15b\x03\x02\x02\x02\x17d\x03\x02\x02\x02\x19g\x03\x02\x02\x02\x1B' +
    'j\x03\x02\x02\x02\x1Dl\x03\x02\x02\x02\x1Ft\x03\x02\x02\x02!{\x03\x02' +
    "\x02\x02#}\x03\x02\x02\x02%\x80\x03\x02\x02\x02'\x85\x03\x02\x02\x02" +
    ')\x8A\x03\x02\x02\x02+\x8D\x03\x02\x02\x02-\x90\x03\x02\x02\x02/\x92\x03' +
    '\x02\x02\x021\x94\x03\x02\x02\x023\x98\x03\x02\x02\x025\x9C\x03\x02\x02' +
    '\x027\x9F\x03\x02\x02\x029\xAC\x03\x02\x02\x02;\xB4\x03\x02\x02\x02=\xC6' +
    '\x03\x02\x02\x02?\xD1\x03\x02\x02\x02A\xE9\x03\x02\x02\x02C\xEC\x03\x02' +
    '\x02\x02E\xF0\x03\x02\x02\x02G\xF9\x03\x02\x02\x02I\xFC\x03\x02\x02\x02' +
    'KL\x07<\x02\x02L\x04\x03\x02\x02\x02MN\x07,\x02\x02N\x06\x03\x02\x02\x02' +
    'OP\x071\x02\x02P\b\x03\x02\x02\x02QR\x07f\x02\x02RS\x07k\x02\x02ST\x07' +
    'x\x02\x02T\n\x03\x02\x02\x02UV\x07o\x02\x02VW\x07q\x02\x02WX\x07f\x02' +
    '\x02X\f\x03\x02\x02\x02YZ\x07-\x02\x02Z\x0E\x03\x02\x02\x02[\\\x07/\x02' +
    '\x02\\\x10\x03\x02\x02\x02]^\x07>\x02\x02^_\x07@\x02\x02_\x12\x03\x02' +
    '\x02\x02`a\x07>\x02\x02a\x14\x03\x02\x02\x02bc\x07@\x02\x02c\x16\x03\x02' +
    '\x02\x02de\x07>\x02\x02ef\x07?\x02\x02f\x18\x03\x02\x02\x02gh\x07@\x02' +
    '\x02hi\x07?\x02\x02i\x1A\x03\x02\x02\x02jk\x07?\x02\x02k\x1C\x03\x02\x02' +
    '\x02lm\x07c\x02\x02mn\x07p\x02\x02no\x07f\x02\x02op\x07c\x02\x02pq\x07' +
    'n\x02\x02qr\x07u\x02\x02rs\x07q\x02\x02s\x1E\x03\x02\x02\x02tu\x07q\x02' +
    '\x02uv\x07t\x02\x02vw\x07g\x02\x02wx\x07n\x02\x02xy\x07u\x02\x02yz\x07' +
    'g\x02\x02z \x03\x02\x02\x02{|\x07`\x02\x02|"\x03\x02\x02\x02}~\x07k\x02' +
    '\x02~\x7F\x07h\x02\x02\x7F$\x03\x02\x02\x02\x80\x81\x07v\x02\x02\x81\x82' +
    '\x07j\x02\x02\x82\x83\x07g\x02\x02\x83\x84\x07p\x02\x02\x84&\x03\x02\x02' +
    '\x02\x85\x86\x07g\x02\x02\x86\x87\x07n\x02\x02\x87\x88\x07u\x02\x02\x88' +
    '\x89\x07g\x02\x02\x89(\x03\x02\x02\x02\x8A\x8B\x07h\x02\x02\x8B\x8C\x07' +
    'p\x02\x02\x8C*\x03\x02\x02\x02\x8D\x8E\x07?\x02\x02\x8E\x8F\x07@\x02\x02' +
    '\x8F,\x03\x02\x02\x02\x90\x91\x07*\x02\x02\x91.\x03\x02\x02\x02\x92\x93' +
    '\x07+\x02\x02\x930\x03\x02\x02\x02\x94\x95\x07x\x02\x02\x95\x96\x07c\x02' +
    '\x02\x96\x97\x07n\x02\x02\x972\x03\x02\x02\x02\x98\x99\x07h\x02\x02\x99' +
    '\x9A\x07w\x02\x02\x9A\x9B\x07p\x02\x02\x9B4\x03\x02\x02\x02\x9C\x9D\x07' +
    '=\x02\x02\x9D6\x03\x02\x02\x02\x9E\xA0\t\x02\x02\x02\x9F\x9E\x03\x02\x02' +
    '\x02\xA0\xA1\x03\x02\x02\x02\xA1\x9F\x03\x02\x02\x02\xA1\xA2\x03\x02\x02' +
    '\x02\xA28\x03\x02\x02\x02\xA3\xA4\x07v\x02\x02\xA4\xA5\x07t\x02\x02\xA5' +
    '\xA6\x07w\x02\x02\xA6\xAD\x07g\x02\x02\xA7\xA8\x07h\x02\x02\xA8\xA9\x07' +
    'c\x02\x02\xA9\xAA\x07n\x02\x02\xAA\xAB\x07u\x02\x02\xAB\xAD\x07g\x02\x02' +
    '\xAC\xA3\x03\x02\x02\x02\xAC\xA7\x03\x02\x02\x02\xAD:\x03\x02\x02\x02' +
    '\xAE\xB0\t\x02\x02\x02\xAF\xAE\x03\x02\x02\x02\xB0\xB1\x03\x02\x02\x02' +
    '\xB1\xAF\x03\x02\x02\x02\xB1\xB2\x03\x02\x02\x02\xB2\xB3\x03\x02\x02\x02' +
    '\xB3\xB5\t\x03\x02\x02\xB4\xAF\x03\x02\x02\x02\xB4\xB5\x03\x02\x02\x02' +
    '\xB5\xB7\x03\x02\x02\x02\xB6\xB8\t\x02\x02\x02\xB7\xB6\x03\x02\x02\x02' +
    '\xB8\xB9\x03\x02\x02\x02\xB9\xB7\x03\x02\x02\x02\xB9\xBA\x03\x02\x02\x02' +
    '\xBA\xC4\x03\x02\x02\x02\xBB\xBD\t\x04\x02\x02\xBC\xBE\t\x05\x02\x02\xBD' +
    '\xBC\x03\x02\x02\x02\xBD\xBE\x03\x02\x02\x02\xBE\xC0\x03\x02\x02\x02\xBF' +
    '\xC1\t\x02\x02\x02\xC0\xBF\x03\x02\x02\x02\xC1\xC2\x03\x02\x02\x02\xC2' +
    '\xC0\x03\x02\x02\x02\xC2\xC3\x03\x02\x02\x02\xC3\xC5\x03\x02\x02\x02\xC4' +
    '\xBB\x03\x02\x02\x02\xC4\xC5\x03\x02\x02\x02\xC5<\x03\x02\x02\x02\xC6' +
    '\xCC\x07$\x02\x02\xC7\xC8\x07^\x02\x02\xC8\xCB\t\x06\x02\x02\xC9\xCB\n' +
    '\x07\x02\x02\xCA\xC7\x03\x02\x02\x02\xCA\xC9\x03\x02\x02\x02\xCB\xCE\x03' +
    '\x02\x02\x02\xCC\xCA\x03\x02\x02\x02\xCC\xCD\x03\x02\x02\x02\xCD\xCF\x03' +
    '\x02\x02\x02\xCE\xCC\x03\x02\x02\x02\xCF\xD0\x07$\x02\x02\xD0>\x03\x02' +
    '\x02\x02\xD1\xD2\x07*\x02\x02\xD2\xD3\x07+\x02\x02\xD3@\x03\x02\x02\x02' +
    '\xD4\xD5\x07d\x02\x02\xD5\xD6\x07q\x02\x02\xD6\xD7\x07q\x02\x02\xD7\xEA' +
    '\x07n\x02\x02\xD8\xD9\x07k\x02\x02\xD9\xDA\x07p\x02\x02\xDA\xEA\x07v\x02' +
    '\x02\xDB\xDC\x07t\x02\x02\xDC\xDD\x07g\x02\x02\xDD\xDE\x07c\x02\x02\xDE' +
    '\xEA\x07n\x02\x02\xDF\xE0\x07u\x02\x02\xE0\xE1\x07v\x02\x02\xE1\xE2\x07' +
    't\x02\x02\xE2\xE3\x07k\x02\x02\xE3\xE4\x07p\x02\x02\xE4\xEA\x07i\x02\x02' +
    '\xE5\xE6\x07w\x02\x02\xE6\xE7\x07p\x02\x02\xE7\xE8\x07k\x02\x02\xE8\xEA' +
    '\x07v\x02\x02\xE9\xD4\x03\x02\x02\x02\xE9\xD8\x03\x02\x02\x02\xE9\xDB' +
    '\x03\x02\x02\x02\xE9\xDF\x03\x02\x02\x02\xE9\xE5\x03\x02\x02\x02\xEAB' +
    '\x03\x02\x02\x02\xEB\xED\t\b\x02\x02\xEC\xEB\x03\x02\x02\x02\xED\xEE\x03' +
    '\x02\x02\x02\xEE\xEC\x03\x02\x02\x02\xEE\xEF\x03\x02\x02\x02\xEFD\x03' +
    '\x02\x02\x02\xF0\xF4\t\t\x02\x02\xF1\xF3\t\n\x02\x02\xF2\xF1\x03\x02\x02' +
    '\x02\xF3\xF6\x03\x02\x02\x02\xF4\xF2\x03\x02\x02\x02\xF4\xF5\x03\x02\x02' +
    '\x02\xF5F\x03\x02\x02\x02\xF6\xF4\x03\x02\x02\x02\xF7\xFA\x05E#\x02\xF8' +
    '\xFA\x05C"\x02\xF9\xF7\x03\x02\x02\x02\xF9\xF8\x03\x02\x02\x02\xFAH\x03' +
    '\x02\x02\x02\xFB\xFD\t\v\x02\x02\xFC\xFB\x03\x02\x02\x02\xFD\xFE\x03\x02' +
    '\x02\x02\xFE\xFC\x03\x02\x02\x02\xFE\xFF\x03\x02\x02\x02\xFF\u0100\x03' +
    '\x02\x02\x02\u0100\u0101\b%\x02\x02\u0101J\x03\x02\x02\x02\x12\x02\xA1' +
    '\xAC\xB1\xB4\xB9\xBD\xC2\xC4\xCA\xCC\xE9\xEE\xF4\xF9\xFE\x03\b\x02\x02'
  public static __ATN: ATN
  public static get _ATN(): ATN {
    if (!CalcLexer.__ATN) {
      CalcLexer.__ATN = new ATNDeserializer().deserialize(
        Utils.toCharArray(CalcLexer._serializedATN)
      )
    }

    return CalcLexer.__ATN
  }
}
