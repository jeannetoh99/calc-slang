// Generated from ./src/lang/Calc.g4 by ANTLR 4.9.0-SNAPSHOT

import { ATN } from 'antlr4ts/atn/ATN'
import { ATNDeserializer } from 'antlr4ts/atn/ATNDeserializer'
import { LexerATNSimulator } from 'antlr4ts/atn/LexerATNSimulator'
import { CharStream } from 'antlr4ts/CharStream'
import { NotNull } from 'antlr4ts/Decorators'
import { Override } from 'antlr4ts/Decorators'
import { Lexer } from 'antlr4ts/Lexer'
import * as Utils from 'antlr4ts/misc/Utils'
import { RuleContext } from 'antlr4ts/RuleContext'
import { Vocabulary } from 'antlr4ts/Vocabulary'
import { VocabularyImpl } from 'antlr4ts/VocabularyImpl'

export class CalcLexer extends Lexer {
  public static readonly T__0 = 1
  public static readonly T__1 = 2
  public static readonly T__2 = 3
  public static readonly T__3 = 4
  public static readonly T__4 = 5
  public static readonly T__5 = 6
  public static readonly T__6 = 7
  public static readonly T__7 = 8
  public static readonly T__8 = 9
  public static readonly T__9 = 10
  public static readonly T__10 = 11
  public static readonly T__11 = 12
  public static readonly T__12 = 13
  public static readonly T__13 = 14
  public static readonly T__14 = 15
  public static readonly T__15 = 16
  public static readonly T__16 = 17
  public static readonly T__17 = 18
  public static readonly T__18 = 19
  public static readonly T__19 = 20
  public static readonly T__20 = 21
  public static readonly T__21 = 22
  public static readonly T__22 = 23
  public static readonly T__23 = 24
  public static readonly T__24 = 25
  public static readonly T__25 = 26
  public static readonly T__26 = 27
  public static readonly T__27 = 28
  public static readonly T__28 = 29
  public static readonly INTEGER_LITERAL = 30
  public static readonly BOOLEAN_LITERAL = 31
  public static readonly REAL_LITERAL = 32
  public static readonly STRING_LITERAL = 33
  public static readonly TYPE = 34
  public static readonly IDENTIFIER = 35
  public static readonly WHITESPACE = 36

  // tslint:disable:no-trailing-whitespace
  public static readonly channelNames: string[] = ['DEFAULT_TOKEN_CHANNEL', 'HIDDEN']

  // tslint:disable:no-trailing-whitespace
  public static readonly modeNames: string[] = ['DEFAULT_MODE']

  public static readonly ruleNames: string[] = [
    'T__0',
    'T__1',
    'T__2',
    'T__3',
    'T__4',
    'T__5',
    'T__6',
    'T__7',
    'T__8',
    'T__9',
    'T__10',
    'T__11',
    'T__12',
    'T__13',
    'T__14',
    'T__15',
    'T__16',
    'T__17',
    'T__18',
    'T__19',
    'T__20',
    'T__21',
    'T__22',
    'T__23',
    'T__24',
    'T__25',
    'T__26',
    'T__27',
    'T__28',
    'INTEGER_LITERAL',
    'BOOLEAN_LITERAL',
    'REAL_LITERAL',
    'STRING_LITERAL',
    'TYPE',
    'SYMBOLIC_IDENTIFIER',
    'ALPHANUMERIC_IDENTIFIER',
    'IDENTIFIER',
    'WHITESPACE'
  ]

  private static readonly _LITERAL_NAMES: Array<string | undefined> = [
    undefined,
    "':'",
    "'*'",
    "'/'",
    "'div'",
    "'mod'",
    "'+'",
    "'-'",
    "'<>'",
    "'<'",
    "'>'",
    "'<='",
    "'>='",
    "'='",
    "'andalso'",
    "'orelse'",
    "'^'",
    "'if'",
    "'then'",
    "'else'",
    "'fn'",
    "'=>'",
    "'let'",
    "'in'",
    "'end'",
    "'('",
    "';'",
    "')'",
    "'val'",
    "'fun'"
  ]
  private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    'INTEGER_LITERAL',
    'BOOLEAN_LITERAL',
    'REAL_LITERAL',
    'STRING_LITERAL',
    'TYPE',
    'IDENTIFIER',
    'WHITESPACE'
  ]
  public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(
    CalcLexer._LITERAL_NAMES,
    CalcLexer._SYMBOLIC_NAMES,
    []
  )

  // @Override
  // @NotNull
  public get vocabulary(): Vocabulary {
    return CalcLexer.VOCABULARY
  }
  // tslint:enable:no-trailing-whitespace

  constructor(input: CharStream) {
    super(input)
    this._interp = new LexerATNSimulator(CalcLexer._ATN, this)
  }

  // @Override
  public get grammarFileName(): string {
    return 'Calc.g4'
  }

  // @Override
  public get ruleNames(): string[] {
    return CalcLexer.ruleNames
  }

  // @Override
  public get serializedATN(): string {
    return CalcLexer._serializedATN
  }

  // @Override
  public get channelNames(): string[] {
    return CalcLexer.channelNames
  }

  // @Override
  public get modeNames(): string[] {
    return CalcLexer.modeNames
  }

  public static readonly _serializedATN: string =
    '\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02&\u010A\b\x01' +
    '\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06' +
    '\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r' +
    '\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t' +
    '\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t' +
    '\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t' +
    '\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04"\t' +
    "\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04'\t'\x03\x02\x03\x02\x03\x03\x03" +
    '\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03' +
    '\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\t\x03\n\x03\n' +
    '\x03\v\x03\v\x03\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F' +
    '\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10' +
    '\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x12\x03\x12' +
    '\x03\x12\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14' +
    '\x03\x14\x03\x14\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03\x16\x03\x17' +
    '\x03\x17\x03\x17\x03\x17\x03\x18\x03\x18\x03\x18\x03\x19\x03\x19\x03\x19' +
    '\x03\x19\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1D\x03\x1D' +
    '\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1F\x06\x1F\xAF\n' +
    '\x1F\r\x1F\x0E\x1F\xB0\x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03 \x05' +
    ' \xBC\n \x03!\x06!\xBF\n!\r!\x0E!\xC0\x03!\x05!\xC4\n!\x03!\x06!\xC7\n' +
    '!\r!\x0E!\xC8\x03!\x03!\x05!\xCD\n!\x03!\x06!\xD0\n!\r!\x0E!\xD1\x05!' +
    '\xD4\n!\x03"\x03"\x03"\x03"\x07"\xDA\n"\f"\x0E"\xDD\v"\x03"' +
    '\x03"\x03#\x03#\x03#\x03#\x03#\x03#\x03#\x03#\x03#\x03#\x03#\x03#\x03' +
    '#\x03#\x03#\x03#\x03#\x05#\xF2\n#\x03$\x06$\xF5\n$\r$\x0E$\xF6\x03%\x03' +
    "%\x07%\xFB\n%\f%\x0E%\xFE\v%\x03&\x03&\x05&\u0102\n&\x03'\x06'\u0105" +
    "\n'\r'\x0E'\u0106\x03'\x03'\x02\x02\x02(\x03\x02\x03\x05\x02\x04" +
    '\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v' +
    '\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!' +
    "\x02\x12#\x02\x13%\x02\x14'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x19" +
    '1\x02\x1A3\x02\x1B5\x02\x1C7\x02\x1D9\x02\x1E;\x02\x1F=\x02 ?\x02!A\x02' +
    '"C\x02#E\x02$G\x02\x02I\x02\x02K\x02%M\x02&\x03\x02\f\x03\x022;\x03\x02' +
    '00\x04\x02GGgg\x03\x02\x80\x80\x04\x02$$^^\x06\x02\f\f\x0F\x0F$$^^\v\x02' +
    '##%),1<<>B^^``~~\x80\x80\x04\x02C\\c|\x07\x02))2;C\\aac|\x05\x02\v\f\x0F' +
    '\x0F""\x02\u0118\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02' +
    '\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r' +
    '\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13' +
    '\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19' +
    '\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F' +
    '\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02' +
    "\x02\x02\x02'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02" +
    '\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03' +
    '\x02\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02' +
    '\x02\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x02' +
    'A\x03\x02\x02\x02\x02C\x03\x02\x02\x02\x02E\x03\x02\x02\x02\x02K\x03\x02' +
    '\x02\x02\x02M\x03\x02\x02\x02\x03O\x03\x02\x02\x02\x05Q\x03\x02\x02\x02' +
    '\x07S\x03\x02\x02\x02\tU\x03\x02\x02\x02\vY\x03\x02\x02\x02\r]\x03\x02' +
    '\x02\x02\x0F_\x03\x02\x02\x02\x11a\x03\x02\x02\x02\x13d\x03\x02\x02\x02' +
    '\x15f\x03\x02\x02\x02\x17h\x03\x02\x02\x02\x19k\x03\x02\x02\x02\x1Bn\x03' +
    '\x02\x02\x02\x1Dp\x03\x02\x02\x02\x1Fx\x03\x02\x02\x02!\x7F\x03\x02\x02' +
    "\x02#\x81\x03\x02\x02\x02%\x84\x03\x02\x02\x02'\x89\x03\x02\x02\x02)" +
    '\x8E\x03\x02\x02\x02+\x91\x03\x02\x02\x02-\x94\x03\x02\x02\x02/\x98\x03' +
    '\x02\x02\x021\x9B\x03\x02\x02\x023\x9F\x03\x02\x02\x025\xA1\x03\x02\x02' +
    '\x027\xA3\x03\x02\x02\x029\xA5\x03\x02\x02\x02;\xA9\x03\x02\x02\x02=\xAE' +
    '\x03\x02\x02\x02?\xBB\x03\x02\x02\x02A\xC3\x03\x02\x02\x02C\xD5\x03\x02' +
    '\x02\x02E\xF1\x03\x02\x02\x02G\xF4\x03\x02\x02\x02I\xF8\x03\x02\x02\x02' +
    'K\u0101\x03\x02\x02\x02M\u0104\x03\x02\x02\x02OP\x07<\x02\x02P\x04\x03' +
    '\x02\x02\x02QR\x07,\x02\x02R\x06\x03\x02\x02\x02ST\x071\x02\x02T\b\x03' +
    '\x02\x02\x02UV\x07f\x02\x02VW\x07k\x02\x02WX\x07x\x02\x02X\n\x03\x02\x02' +
    '\x02YZ\x07o\x02\x02Z[\x07q\x02\x02[\\\x07f\x02\x02\\\f\x03\x02\x02\x02' +
    ']^\x07-\x02\x02^\x0E\x03\x02\x02\x02_`\x07/\x02\x02`\x10\x03\x02\x02\x02' +
    'ab\x07>\x02\x02bc\x07@\x02\x02c\x12\x03\x02\x02\x02de\x07>\x02\x02e\x14' +
    '\x03\x02\x02\x02fg\x07@\x02\x02g\x16\x03\x02\x02\x02hi\x07>\x02\x02ij' +
    '\x07?\x02\x02j\x18\x03\x02\x02\x02kl\x07@\x02\x02lm\x07?\x02\x02m\x1A' +
    '\x03\x02\x02\x02no\x07?\x02\x02o\x1C\x03\x02\x02\x02pq\x07c\x02\x02qr' +
    '\x07p\x02\x02rs\x07f\x02\x02st\x07c\x02\x02tu\x07n\x02\x02uv\x07u\x02' +
    '\x02vw\x07q\x02\x02w\x1E\x03\x02\x02\x02xy\x07q\x02\x02yz\x07t\x02\x02' +
    'z{\x07g\x02\x02{|\x07n\x02\x02|}\x07u\x02\x02}~\x07g\x02\x02~ \x03\x02' +
    '\x02\x02\x7F\x80\x07`\x02\x02\x80"\x03\x02\x02\x02\x81\x82\x07k\x02\x02' +
    '\x82\x83\x07h\x02\x02\x83$\x03\x02\x02\x02\x84\x85\x07v\x02\x02\x85\x86' +
    '\x07j\x02\x02\x86\x87\x07g\x02\x02\x87\x88\x07p\x02\x02\x88&\x03\x02\x02' +
    '\x02\x89\x8A\x07g\x02\x02\x8A\x8B\x07n\x02\x02\x8B\x8C\x07u\x02\x02\x8C' +
    '\x8D\x07g\x02\x02\x8D(\x03\x02\x02\x02\x8E\x8F\x07h\x02\x02\x8F\x90\x07' +
    'p\x02\x02\x90*\x03\x02\x02\x02\x91\x92\x07?\x02\x02\x92\x93\x07@\x02\x02' +
    '\x93,\x03\x02\x02\x02\x94\x95\x07n\x02\x02\x95\x96\x07g\x02\x02\x96\x97' +
    '\x07v\x02\x02\x97.\x03\x02\x02\x02\x98\x99\x07k\x02\x02\x99\x9A\x07p\x02' +
    '\x02\x9A0\x03\x02\x02\x02\x9B\x9C\x07g\x02\x02\x9C\x9D\x07p\x02\x02\x9D' +
    '\x9E\x07f\x02\x02\x9E2\x03\x02\x02\x02\x9F\xA0\x07*\x02\x02\xA04\x03\x02' +
    '\x02\x02\xA1\xA2\x07=\x02\x02\xA26\x03\x02\x02\x02\xA3\xA4\x07+\x02\x02' +
    '\xA48\x03\x02\x02\x02\xA5\xA6\x07x\x02\x02\xA6\xA7\x07c\x02\x02\xA7\xA8' +
    '\x07n\x02\x02\xA8:\x03\x02\x02\x02\xA9\xAA\x07h\x02\x02\xAA\xAB\x07w\x02' +
    '\x02\xAB\xAC\x07p\x02\x02\xAC<\x03\x02\x02\x02\xAD\xAF\t\x02\x02\x02\xAE' +
    '\xAD\x03\x02\x02\x02\xAF\xB0\x03\x02\x02\x02\xB0\xAE\x03\x02\x02\x02\xB0' +
    '\xB1\x03\x02\x02\x02\xB1>\x03\x02\x02\x02\xB2\xB3\x07v\x02\x02\xB3\xB4' +
    '\x07t\x02\x02\xB4\xB5\x07w\x02\x02\xB5\xBC\x07g\x02\x02\xB6\xB7\x07h\x02' +
    '\x02\xB7\xB8\x07c\x02\x02\xB8\xB9\x07n\x02\x02\xB9\xBA\x07u\x02\x02\xBA' +
    '\xBC\x07g\x02\x02\xBB\xB2\x03\x02\x02\x02\xBB\xB6\x03\x02\x02\x02\xBC' +
    '@\x03\x02\x02\x02\xBD\xBF\t\x02\x02\x02\xBE\xBD\x03\x02\x02\x02\xBF\xC0' +
    '\x03\x02\x02\x02\xC0\xBE\x03\x02\x02\x02\xC0\xC1\x03\x02\x02\x02\xC1\xC2' +
    '\x03\x02\x02\x02\xC2\xC4\t\x03\x02\x02\xC3\xBE\x03\x02\x02\x02\xC3\xC4' +
    '\x03\x02\x02\x02\xC4\xC6\x03\x02\x02\x02\xC5\xC7\t\x02\x02\x02\xC6\xC5' +
    '\x03\x02\x02\x02\xC7\xC8\x03\x02\x02\x02\xC8\xC6\x03\x02\x02\x02\xC8\xC9' +
    '\x03\x02\x02\x02\xC9\xD3\x03\x02\x02\x02\xCA\xCC\t\x04\x02\x02\xCB\xCD' +
    '\t\x05\x02\x02\xCC\xCB\x03\x02\x02\x02\xCC\xCD\x03\x02\x02\x02\xCD\xCF' +
    '\x03\x02\x02\x02\xCE\xD0\t\x02\x02\x02\xCF\xCE\x03\x02\x02\x02\xD0\xD1' +
    '\x03\x02\x02\x02\xD1\xCF\x03\x02\x02\x02\xD1\xD2\x03\x02\x02\x02\xD2\xD4' +
    '\x03\x02\x02\x02\xD3\xCA\x03\x02\x02\x02\xD3\xD4\x03\x02\x02\x02\xD4B' +
    '\x03\x02\x02\x02\xD5\xDB\x07$\x02\x02\xD6\xD7\x07^\x02\x02\xD7\xDA\t\x06' +
    '\x02\x02\xD8\xDA\n\x07\x02\x02\xD9\xD6\x03\x02\x02\x02\xD9\xD8\x03\x02' +
    '\x02\x02\xDA\xDD\x03\x02\x02\x02\xDB\xD9\x03\x02\x02\x02\xDB\xDC\x03\x02' +
    '\x02\x02\xDC\xDE\x03\x02\x02\x02\xDD\xDB\x03\x02\x02\x02\xDE\xDF\x07$' +
    '\x02\x02\xDFD\x03\x02\x02\x02\xE0\xE1\x07d\x02\x02\xE1\xE2\x07q\x02\x02' +
    '\xE2\xE3\x07q\x02\x02\xE3\xF2\x07n\x02\x02\xE4\xE5\x07k\x02\x02\xE5\xE6' +
    '\x07p\x02\x02\xE6\xF2\x07v\x02\x02\xE7\xE8\x07t\x02\x02\xE8\xE9\x07g\x02' +
    '\x02\xE9\xEA\x07c\x02\x02\xEA\xF2\x07n\x02\x02\xEB\xEC\x07u\x02\x02\xEC' +
    '\xED\x07v\x02\x02\xED\xEE\x07t\x02\x02\xEE\xEF\x07k\x02\x02\xEF\xF0\x07' +
    'p\x02\x02\xF0\xF2\x07i\x02\x02\xF1\xE0\x03\x02\x02\x02\xF1\xE4\x03\x02' +
    '\x02\x02\xF1\xE7\x03\x02\x02\x02\xF1\xEB\x03\x02\x02\x02\xF2F\x03\x02' +
    '\x02\x02\xF3\xF5\t\b\x02\x02\xF4\xF3\x03\x02\x02\x02\xF5\xF6\x03\x02\x02' +
    '\x02\xF6\xF4\x03\x02\x02\x02\xF6\xF7\x03\x02\x02\x02\xF7H\x03\x02\x02' +
    '\x02\xF8\xFC\t\t\x02\x02\xF9\xFB\t\n\x02\x02\xFA\xF9\x03\x02\x02\x02\xFB' +
    '\xFE\x03\x02\x02\x02\xFC\xFA\x03\x02\x02\x02\xFC\xFD\x03\x02\x02\x02\xFD' +
    'J\x03\x02\x02\x02\xFE\xFC\x03\x02\x02\x02\xFF\u0102\x05I%\x02\u0100\u0102' +
    '\x05G$\x02\u0101\xFF\x03\x02\x02\x02\u0101\u0100\x03\x02\x02\x02\u0102' +
    'L\x03\x02\x02\x02\u0103\u0105\t\v\x02\x02\u0104\u0103\x03\x02\x02\x02' +
    '\u0105\u0106\x03\x02\x02\x02\u0106\u0104\x03\x02\x02\x02\u0106\u0107\x03' +
    "\x02\x02\x02\u0107\u0108\x03\x02\x02\x02\u0108\u0109\b'\x02\x02\u0109" +
    'N\x03\x02\x02\x02\x12\x02\xB0\xBB\xC0\xC3\xC8\xCC\xD1\xD3\xD9\xDB\xF1' +
    '\xF6\xFC\u0101\u0106\x03\b\x02\x02'
  public static __ATN: ATN
  public static get _ATN(): ATN {
    if (!CalcLexer.__ATN) {
      CalcLexer.__ATN = new ATNDeserializer().deserialize(
        Utils.toCharArray(CalcLexer._serializedATN)
      )
    }

    return CalcLexer.__ATN
  }
}
