// Generated from ./src/lang/Calc.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class CalcLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly T__8 = 9;
	public static readonly T__9 = 10;
	public static readonly T__10 = 11;
	public static readonly T__11 = 12;
	public static readonly INTEGER_LITERAL = 13;
	public static readonly BOOLEAN_LITERAL = 14;
	public static readonly REAL_LITERAL = 15;
	public static readonly STRING_LITERAL = 16;
	public static readonly TYPE = 17;
	public static readonly IDENTIFIER = 18;
	public static readonly WHITESPACE = 19;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "INTEGER_LITERAL", "BOOLEAN_LITERAL", "REAL_LITERAL", 
		"STRING_LITERAL", "TYPE", "SYMBOLIC_IDENTIFIER", "ALPHANUMERIC_IDENTIFIER", 
		"IDENTIFIER", "WHITESPACE",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "':'", "'if'", "'then'", "'else'", "'fn'", "'=>'", "'('", "')'", 
		"'val'", "'='", "'fun'", "';'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, "INTEGER_LITERAL", 
		"BOOLEAN_LITERAL", "REAL_LITERAL", "STRING_LITERAL", "TYPE", "IDENTIFIER", 
		"WHITESPACE",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(CalcLexer._LITERAL_NAMES, CalcLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return CalcLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(CalcLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Calc.g4"; }

	// @Override
	public get ruleNames(): string[] { return CalcLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return CalcLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return CalcLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return CalcLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x15\xAA\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x03\x02\x03" +
		"\x02\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x07\x03" +
		"\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\n\x03\n\x03\v\x03" +
		"\v\x03\f\x03\f\x03\f\x03\f\x03\r\x03\r\x03\x0E\x06\x0ET\n\x0E\r\x0E\x0E" +
		"\x0EU\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F" +
		"\x03\x0F\x05\x0Fa\n\x0F\x03\x10\x06\x10d\n\x10\r\x10\x0E\x10e\x03\x10" +
		"\x05\x10i\n\x10\x03\x10\x06\x10l\n\x10\r\x10\x0E\x10m\x03\x10\x03\x10" +
		"\x05\x10r\n\x10\x03\x10\x06\x10u\n\x10\r\x10\x0E\x10v\x05\x10y\n\x10\x03" +
		"\x11\x03\x11\x03\x11\x03\x11\x07\x11\x7F\n\x11\f\x11\x0E\x11\x82\v\x11" +
		"\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12" +
		"\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x05\x12\x92\n\x12\x03\x13\x06" +
		"\x13\x95\n\x13\r\x13\x0E\x13\x96\x03\x14\x03\x14\x07\x14\x9B\n\x14\f\x14" +
		"\x0E\x14\x9E\v\x14\x03\x15\x03\x15\x05\x15\xA2\n\x15\x03\x16\x06\x16\xA5" +
		"\n\x16\r\x16\x0E\x16\xA6\x03\x16\x03\x16\x02\x02\x02\x17\x03\x02\x03\x05" +
		"\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13" +
		"\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02" +
		"\x11!\x02\x12#\x02\x13%\x02\x02\'\x02\x02)\x02\x14+\x02\x15\x03\x02\f" +
		"\x03\x022;\x03\x0200\x04\x02GGgg\x03\x02\x80\x80\x04\x02$$^^\x06\x02\f" +
		"\f\x0F\x0F$$^^\v\x02##%),1<<>B^^``~~\x80\x80\x04\x02C\\c|\x07\x02))2;" +
		"C\\aac|\x05\x02\v\f\x0F\x0F\"\"\x02\xB8\x02\x03\x03\x02\x02\x02\x02\x05" +
		"\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03" +
		"\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03" +
		"\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03" +
		"\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03" +
		"\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02" +
		"\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x03-\x03\x02\x02\x02" +
		"\x05/\x03\x02\x02\x02\x072\x03\x02\x02\x02\t7\x03\x02\x02\x02\v<\x03\x02" +
		"\x02\x02\r?\x03\x02\x02\x02\x0FB\x03\x02\x02\x02\x11D\x03\x02\x02\x02" +
		"\x13F\x03\x02\x02\x02\x15J\x03\x02\x02\x02\x17L\x03\x02\x02\x02\x19P\x03" +
		"\x02\x02\x02\x1BS\x03\x02\x02\x02\x1D`\x03\x02\x02\x02\x1Fh\x03\x02\x02" +
		"\x02!z\x03\x02\x02\x02#\x91\x03\x02\x02\x02%\x94\x03\x02\x02\x02\'\x98" +
		"\x03\x02\x02\x02)\xA1\x03\x02\x02\x02+\xA4\x03\x02\x02\x02-.\x07<\x02" +
		"\x02.\x04\x03\x02\x02\x02/0\x07k\x02\x0201\x07h\x02\x021\x06\x03\x02\x02" +
		"\x0223\x07v\x02\x0234\x07j\x02\x0245\x07g\x02\x0256\x07p\x02\x026\b\x03" +
		"\x02\x02\x0278\x07g\x02\x0289\x07n\x02\x029:\x07u\x02\x02:;\x07g\x02\x02" +
		";\n\x03\x02\x02\x02<=\x07h\x02\x02=>\x07p\x02\x02>\f\x03\x02\x02\x02?" +
		"@\x07?\x02\x02@A\x07@\x02\x02A\x0E\x03\x02\x02\x02BC\x07*\x02\x02C\x10" +
		"\x03\x02\x02\x02DE\x07+\x02\x02E\x12\x03\x02\x02\x02FG\x07x\x02\x02GH" +
		"\x07c\x02\x02HI\x07n\x02\x02I\x14\x03\x02\x02\x02JK\x07?\x02\x02K\x16" +
		"\x03\x02\x02\x02LM\x07h\x02\x02MN\x07w\x02\x02NO\x07p\x02\x02O\x18\x03" +
		"\x02\x02\x02PQ\x07=\x02\x02Q\x1A\x03\x02\x02\x02RT\t\x02\x02\x02SR\x03" +
		"\x02\x02\x02TU\x03\x02\x02\x02US\x03\x02\x02\x02UV\x03\x02\x02\x02V\x1C" +
		"\x03\x02\x02\x02WX\x07v\x02\x02XY\x07t\x02\x02YZ\x07w\x02\x02Za\x07g\x02" +
		"\x02[\\\x07h\x02\x02\\]\x07c\x02\x02]^\x07n\x02\x02^_\x07u\x02\x02_a\x07" +
		"g\x02\x02`W\x03\x02\x02\x02`[\x03\x02\x02\x02a\x1E\x03\x02\x02\x02bd\t" +
		"\x02\x02\x02cb\x03\x02\x02\x02de\x03\x02\x02\x02ec\x03\x02\x02\x02ef\x03" +
		"\x02\x02\x02fg\x03\x02\x02\x02gi\t\x03\x02\x02hc\x03\x02\x02\x02hi\x03" +
		"\x02\x02\x02ik\x03\x02\x02\x02jl\t\x02\x02\x02kj\x03\x02\x02\x02lm\x03" +
		"\x02\x02\x02mk\x03\x02\x02\x02mn\x03\x02\x02\x02nx\x03\x02\x02\x02oq\t" +
		"\x04\x02\x02pr\t\x05\x02\x02qp\x03\x02\x02\x02qr\x03\x02\x02\x02rt\x03" +
		"\x02\x02\x02su\t\x02\x02\x02ts\x03\x02\x02\x02uv\x03\x02\x02\x02vt\x03" +
		"\x02\x02\x02vw\x03\x02\x02\x02wy\x03\x02\x02\x02xo\x03\x02\x02\x02xy\x03" +
		"\x02\x02\x02y \x03\x02\x02\x02z\x80\x07$\x02\x02{|\x07^\x02\x02|\x7F\t" +
		"\x06\x02\x02}\x7F\n\x07\x02\x02~{\x03\x02\x02\x02~}\x03\x02\x02\x02\x7F" +
		"\x82\x03\x02\x02\x02\x80~\x03\x02\x02\x02\x80\x81\x03\x02\x02\x02\x81" +
		"\x83\x03\x02\x02\x02\x82\x80\x03\x02\x02\x02\x83\x84\x07$\x02\x02\x84" +
		"\"\x03\x02\x02\x02\x85\x86\x07d\x02\x02\x86\x87\x07q\x02\x02\x87\x88\x07" +
		"q\x02\x02\x88\x92\x07n\x02\x02\x89\x8A\x07k\x02\x02\x8A\x8B\x07p\x02\x02" +
		"\x8B\x92\x07v\x02\x02\x8C\x8D\x07t\x02\x02\x8D\x8E\x07g\x02\x02\x8E\x8F" +
		"\x07c\x02\x02\x8F\x92\x07n\x02\x02\x90\x92\x03\x02\x02\x02\x91\x85\x03" +
		"\x02\x02\x02\x91\x89\x03\x02\x02\x02\x91\x8C\x03\x02\x02\x02\x91\x90\x03" +
		"\x02\x02\x02\x92$\x03\x02\x02\x02\x93\x95\t\b\x02\x02\x94\x93\x03\x02" +
		"\x02\x02\x95\x96\x03\x02\x02\x02\x96\x94\x03\x02\x02\x02\x96\x97\x03\x02" +
		"\x02\x02\x97&\x03\x02\x02\x02\x98\x9C\t\t\x02\x02\x99\x9B\t\n\x02\x02" +
		"\x9A\x99\x03\x02\x02\x02\x9B\x9E\x03\x02\x02\x02\x9C\x9A\x03\x02\x02\x02" +
		"\x9C\x9D\x03\x02\x02\x02\x9D(\x03\x02\x02\x02\x9E\x9C\x03\x02\x02\x02" +
		"\x9F\xA2\x05\'\x14\x02\xA0\xA2\x05%\x13\x02\xA1\x9F\x03\x02\x02\x02\xA1" +
		"\xA0\x03\x02\x02\x02\xA2*\x03\x02\x02\x02\xA3\xA5\t\v\x02\x02\xA4\xA3" +
		"\x03\x02\x02\x02\xA5\xA6\x03\x02\x02\x02\xA6\xA4\x03\x02\x02\x02\xA6\xA7" +
		"\x03\x02\x02\x02\xA7\xA8\x03\x02\x02\x02\xA8\xA9\b\x16\x02\x02\xA9,\x03" +
		"\x02\x02\x02\x12\x02U`ehmqvx~\x80\x91\x96\x9C\xA1\xA6\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!CalcLexer.__ATN) {
			CalcLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(CalcLexer._serializedATN));
		}

		return CalcLexer.__ATN;
	}

}

