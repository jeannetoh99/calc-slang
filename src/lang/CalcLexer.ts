// Generated from ./src/lang/Calc.g4 by ANTLR 4.9.0-SNAPSHOT

import { ATN } from 'antlr4ts/atn/ATN'
import { ATNDeserializer } from 'antlr4ts/atn/ATNDeserializer'
import { LexerATNSimulator } from 'antlr4ts/atn/LexerATNSimulator'
import { CharStream } from 'antlr4ts/CharStream'
import { NotNull } from 'antlr4ts/Decorators'
import { Override } from 'antlr4ts/Decorators'
import { Lexer } from 'antlr4ts/Lexer'
import * as Utils from 'antlr4ts/misc/Utils'
import { RuleContext } from 'antlr4ts/RuleContext'
import { Vocabulary } from 'antlr4ts/Vocabulary'
import { VocabularyImpl } from 'antlr4ts/VocabularyImpl'

export class CalcLexer extends Lexer {
  public static readonly T__0 = 1
  public static readonly T__1 = 2
  public static readonly T__2 = 3
  public static readonly T__3 = 4
  public static readonly T__4 = 5
  public static readonly T__5 = 6
  public static readonly T__6 = 7
  public static readonly T__7 = 8
  public static readonly T__8 = 9
  public static readonly T__9 = 10
  public static readonly T__10 = 11
  public static readonly T__11 = 12
  public static readonly T__12 = 13
  public static readonly T__13 = 14
  public static readonly T__14 = 15
  public static readonly T__15 = 16
  public static readonly T__16 = 17
  public static readonly T__17 = 18
  public static readonly T__18 = 19
  public static readonly T__19 = 20
  public static readonly T__20 = 21
  public static readonly T__21 = 22
  public static readonly T__22 = 23
  public static readonly T__23 = 24
  public static readonly T__24 = 25
  public static readonly T__25 = 26
  public static readonly INTEGER_LITERAL = 27
  public static readonly BOOLEAN_LITERAL = 28
  public static readonly REAL_LITERAL = 29
  public static readonly STRING_LITERAL = 30
  public static readonly TYPE = 31
  public static readonly IDENTIFIER = 32
  public static readonly WHITESPACE = 33

  // tslint:disable:no-trailing-whitespace
  public static readonly channelNames: string[] = ['DEFAULT_TOKEN_CHANNEL', 'HIDDEN']

  // tslint:disable:no-trailing-whitespace
  public static readonly modeNames: string[] = ['DEFAULT_MODE']

  public static readonly ruleNames: string[] = [
    'T__0',
    'T__1',
    'T__2',
    'T__3',
    'T__4',
    'T__5',
    'T__6',
    'T__7',
    'T__8',
    'T__9',
    'T__10',
    'T__11',
    'T__12',
    'T__13',
    'T__14',
    'T__15',
    'T__16',
    'T__17',
    'T__18',
    'T__19',
    'T__20',
    'T__21',
    'T__22',
    'T__23',
    'T__24',
    'T__25',
    'INTEGER_LITERAL',
    'BOOLEAN_LITERAL',
    'REAL_LITERAL',
    'STRING_LITERAL',
    'TYPE',
    'SYMBOLIC_IDENTIFIER',
    'ALPHANUMERIC_IDENTIFIER',
    'IDENTIFIER',
    'WHITESPACE'
  ]

  private static readonly _LITERAL_NAMES: Array<string | undefined> = [
    undefined,
    "':'",
    "'*'",
    "'/'",
    "'div'",
    "'mod'",
    "'+'",
    "'-'",
    "'<>'",
    "'<'",
    "'>'",
    "'<='",
    "'>='",
    "'='",
    "'andalso'",
    "'orelse'",
    "'^'",
    "'if'",
    "'then'",
    "'else'",
    "'fn'",
    "'=>'",
    "'('",
    "')'",
    "'val'",
    "'fun'",
    "';'"
  ]
  private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    'INTEGER_LITERAL',
    'BOOLEAN_LITERAL',
    'REAL_LITERAL',
    'STRING_LITERAL',
    'TYPE',
    'IDENTIFIER',
    'WHITESPACE'
  ]
  public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(
    CalcLexer._LITERAL_NAMES,
    CalcLexer._SYMBOLIC_NAMES,
    []
  )

  // @Override
  // @NotNull
  public get vocabulary(): Vocabulary {
    return CalcLexer.VOCABULARY
  }
  // tslint:enable:no-trailing-whitespace

  constructor(input: CharStream) {
    super(input)
    this._interp = new LexerATNSimulator(CalcLexer._ATN, this)
  }

  // @Override
  public get grammarFileName(): string {
    return 'Calc.g4'
  }

  // @Override
  public get ruleNames(): string[] {
    return CalcLexer.ruleNames
  }

  // @Override
  public get serializedATN(): string {
    return CalcLexer._serializedATN
  }

  // @Override
  public get channelNames(): string[] {
    return CalcLexer.channelNames
  }

  // @Override
  public get modeNames(): string[] {
    return CalcLexer.modeNames
  }

  public static readonly _serializedATN: string =
    '\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02#\xF9\b\x01\x04' +
    '\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04' +
    '\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r' +
    '\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12' +
    '\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17' +
    '\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C' +
    '\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04"\t"\x04' +
    '#\t#\x04$\t$\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03' +
    '\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03' +
    '\b\x03\b\x03\t\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03\f\x03' +
    '\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F' +
    '\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10' +
    '\x03\x10\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13' +
    '\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15' +
    '\x03\x15\x03\x16\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18\x03\x18\x03\x19' +
    '\x03\x19\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1B\x03\x1B' +
    '\x03\x1C\x06\x1C\x9E\n\x1C\r\x1C\x0E\x1C\x9F\x03\x1D\x03\x1D\x03\x1D\x03' +
    '\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x05\x1D\xAB\n\x1D\x03\x1E' +
    '\x06\x1E\xAE\n\x1E\r\x1E\x0E\x1E\xAF\x03\x1E\x05\x1E\xB3\n\x1E\x03\x1E' +
    '\x06\x1E\xB6\n\x1E\r\x1E\x0E\x1E\xB7\x03\x1E\x03\x1E\x05\x1E\xBC\n\x1E' +
    '\x03\x1E\x06\x1E\xBF\n\x1E\r\x1E\x0E\x1E\xC0\x05\x1E\xC3\n\x1E\x03\x1F' +
    '\x03\x1F\x03\x1F\x03\x1F\x07\x1F\xC9\n\x1F\f\x1F\x0E\x1F\xCC\v\x1F\x03' +
    '\x1F\x03\x1F\x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03' +
    ' \x03 \x03 \x03 \x03 \x03 \x05 \xE1\n \x03!\x06!\xE4\n!\r!\x0E!\xE5\x03' +
    '"\x03"\x07"\xEA\n"\f"\x0E"\xED\v"\x03#\x03#\x05#\xF1\n#\x03$\x06' +
    '$\xF4\n$\r$\x0E$\xF5\x03$\x03$\x02\x02\x02%\x03\x02\x03\x05\x02\x04\x07' +
    '\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15' +
    '\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02' +
    "\x12#\x02\x13%\x02\x14'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x191" +
    '\x02\x1A3\x02\x1B5\x02\x1C7\x02\x1D9\x02\x1E;\x02\x1F=\x02 ?\x02!A\x02' +
    '\x02C\x02\x02E\x02"G\x02#\x03\x02\f\x03\x022;\x03\x0200\x04\x02GGgg\x03' +
    '\x02\x80\x80\x04\x02$$^^\x06\x02\f\f\x0F\x0F$$^^\v\x02##%),1<<>B^^``~' +
    '~\x80\x80\x04\x02C\\c|\x07\x02))2;C\\aac|\x05\x02\v\f\x0F\x0F""\x02' +
    '\u0107\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02' +
    '\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02' +
    '\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02' +
    '\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02' +
    '\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02' +
    '\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02' +
    "'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03" +
    '\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02' +
    '\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02' +
    ';\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x02E\x03\x02' +
    '\x02\x02\x02G\x03\x02\x02\x02\x03I\x03\x02\x02\x02\x05K\x03\x02\x02\x02' +
    '\x07M\x03\x02\x02\x02\tO\x03\x02\x02\x02\vS\x03\x02\x02\x02\rW\x03\x02' +
    '\x02\x02\x0FY\x03\x02\x02\x02\x11[\x03\x02\x02\x02\x13^\x03\x02\x02\x02' +
    '\x15`\x03\x02\x02\x02\x17b\x03\x02\x02\x02\x19e\x03\x02\x02\x02\x1Bh\x03' +
    '\x02\x02\x02\x1Dj\x03\x02\x02\x02\x1Fr\x03\x02\x02\x02!y\x03\x02\x02\x02' +
    "#{\x03\x02\x02\x02%~\x03\x02\x02\x02'\x83\x03\x02\x02\x02)\x88\x03\x02" +
    '\x02\x02+\x8B\x03\x02\x02\x02-\x8E\x03\x02\x02\x02/\x90\x03\x02\x02\x02' +
    '1\x92\x03\x02\x02\x023\x96\x03\x02\x02\x025\x9A\x03\x02\x02\x027\x9D\x03' +
    '\x02\x02\x029\xAA\x03\x02\x02\x02;\xB2\x03\x02\x02\x02=\xC4\x03\x02\x02' +
    '\x02?\xE0\x03\x02\x02\x02A\xE3\x03\x02\x02\x02C\xE7\x03\x02\x02\x02E\xF0' +
    '\x03\x02\x02\x02G\xF3\x03\x02\x02\x02IJ\x07<\x02\x02J\x04\x03\x02\x02' +
    '\x02KL\x07,\x02\x02L\x06\x03\x02\x02\x02MN\x071\x02\x02N\b\x03\x02\x02' +
    '\x02OP\x07f\x02\x02PQ\x07k\x02\x02QR\x07x\x02\x02R\n\x03\x02\x02\x02S' +
    'T\x07o\x02\x02TU\x07q\x02\x02UV\x07f\x02\x02V\f\x03\x02\x02\x02WX\x07' +
    '-\x02\x02X\x0E\x03\x02\x02\x02YZ\x07/\x02\x02Z\x10\x03\x02\x02\x02[\\' +
    '\x07>\x02\x02\\]\x07@\x02\x02]\x12\x03\x02\x02\x02^_\x07>\x02\x02_\x14' +
    '\x03\x02\x02\x02`a\x07@\x02\x02a\x16\x03\x02\x02\x02bc\x07>\x02\x02cd' +
    '\x07?\x02\x02d\x18\x03\x02\x02\x02ef\x07@\x02\x02fg\x07?\x02\x02g\x1A' +
    '\x03\x02\x02\x02hi\x07?\x02\x02i\x1C\x03\x02\x02\x02jk\x07c\x02\x02kl' +
    '\x07p\x02\x02lm\x07f\x02\x02mn\x07c\x02\x02no\x07n\x02\x02op\x07u\x02' +
    '\x02pq\x07q\x02\x02q\x1E\x03\x02\x02\x02rs\x07q\x02\x02st\x07t\x02\x02' +
    'tu\x07g\x02\x02uv\x07n\x02\x02vw\x07u\x02\x02wx\x07g\x02\x02x \x03\x02' +
    '\x02\x02yz\x07`\x02\x02z"\x03\x02\x02\x02{|\x07k\x02\x02|}\x07h\x02\x02' +
    '}$\x03\x02\x02\x02~\x7F\x07v\x02\x02\x7F\x80\x07j\x02\x02\x80\x81\x07' +
    'g\x02\x02\x81\x82\x07p\x02\x02\x82&\x03\x02\x02\x02\x83\x84\x07g\x02\x02' +
    '\x84\x85\x07n\x02\x02\x85\x86\x07u\x02\x02\x86\x87\x07g\x02\x02\x87(\x03' +
    '\x02\x02\x02\x88\x89\x07h\x02\x02\x89\x8A\x07p\x02\x02\x8A*\x03\x02\x02' +
    '\x02\x8B\x8C\x07?\x02\x02\x8C\x8D\x07@\x02\x02\x8D,\x03\x02\x02\x02\x8E' +
    '\x8F\x07*\x02\x02\x8F.\x03\x02\x02\x02\x90\x91\x07+\x02\x02\x910\x03\x02' +
    '\x02\x02\x92\x93\x07x\x02\x02\x93\x94\x07c\x02\x02\x94\x95\x07n\x02\x02' +
    '\x952\x03\x02\x02\x02\x96\x97\x07h\x02\x02\x97\x98\x07w\x02\x02\x98\x99' +
    '\x07p\x02\x02\x994\x03\x02\x02\x02\x9A\x9B\x07=\x02\x02\x9B6\x03\x02\x02' +
    '\x02\x9C\x9E\t\x02\x02\x02\x9D\x9C\x03\x02\x02\x02\x9E\x9F\x03\x02\x02' +
    '\x02\x9F\x9D\x03\x02\x02\x02\x9F\xA0\x03\x02\x02\x02\xA08\x03\x02\x02' +
    '\x02\xA1\xA2\x07v\x02\x02\xA2\xA3\x07t\x02\x02\xA3\xA4\x07w\x02\x02\xA4' +
    '\xAB\x07g\x02\x02\xA5\xA6\x07h\x02\x02\xA6\xA7\x07c\x02\x02\xA7\xA8\x07' +
    'n\x02\x02\xA8\xA9\x07u\x02\x02\xA9\xAB\x07g\x02\x02\xAA\xA1\x03\x02\x02' +
    '\x02\xAA\xA5\x03\x02\x02\x02\xAB:\x03\x02\x02\x02\xAC\xAE\t\x02\x02\x02' +
    '\xAD\xAC\x03\x02\x02\x02\xAE\xAF\x03\x02\x02\x02\xAF\xAD\x03\x02\x02\x02' +
    '\xAF\xB0\x03\x02\x02\x02\xB0\xB1\x03\x02\x02\x02\xB1\xB3\t\x03\x02\x02' +
    '\xB2\xAD\x03\x02\x02\x02\xB2\xB3\x03\x02\x02\x02\xB3\xB5\x03\x02\x02\x02' +
    '\xB4\xB6\t\x02\x02\x02\xB5\xB4\x03\x02\x02\x02\xB6\xB7\x03\x02\x02\x02' +
    '\xB7\xB5\x03\x02\x02\x02\xB7\xB8\x03\x02\x02\x02\xB8\xC2\x03\x02\x02\x02' +
    '\xB9\xBB\t\x04\x02\x02\xBA\xBC\t\x05\x02\x02\xBB\xBA\x03\x02\x02\x02\xBB' +
    '\xBC\x03\x02\x02\x02\xBC\xBE\x03\x02\x02\x02\xBD\xBF\t\x02\x02\x02\xBE' +
    '\xBD\x03\x02\x02\x02\xBF\xC0\x03\x02\x02\x02\xC0\xBE\x03\x02\x02\x02\xC0' +
    '\xC1\x03\x02\x02\x02\xC1\xC3\x03\x02\x02\x02\xC2\xB9\x03\x02\x02\x02\xC2' +
    '\xC3\x03\x02\x02\x02\xC3<\x03\x02\x02\x02\xC4\xCA\x07$\x02\x02\xC5\xC6' +
    '\x07^\x02\x02\xC6\xC9\t\x06\x02\x02\xC7\xC9\n\x07\x02\x02\xC8\xC5\x03' +
    '\x02\x02\x02\xC8\xC7\x03\x02\x02\x02\xC9\xCC\x03\x02\x02\x02\xCA\xC8\x03' +
    '\x02\x02\x02\xCA\xCB\x03\x02\x02\x02\xCB\xCD\x03\x02\x02\x02\xCC\xCA\x03' +
    '\x02\x02\x02\xCD\xCE\x07$\x02\x02\xCE>\x03\x02\x02\x02\xCF\xD0\x07d\x02' +
    '\x02\xD0\xD1\x07q\x02\x02\xD1\xD2\x07q\x02\x02\xD2\xE1\x07n\x02\x02\xD3' +
    '\xD4\x07k\x02\x02\xD4\xD5\x07p\x02\x02\xD5\xE1\x07v\x02\x02\xD6\xD7\x07' +
    't\x02\x02\xD7\xD8\x07g\x02\x02\xD8\xD9\x07c\x02\x02\xD9\xE1\x07n\x02\x02' +
    '\xDA\xDB\x07u\x02\x02\xDB\xDC\x07v\x02\x02\xDC\xDD\x07t\x02\x02\xDD\xDE' +
    '\x07k\x02\x02\xDE\xDF\x07p\x02\x02\xDF\xE1\x07i\x02\x02\xE0\xCF\x03\x02' +
    '\x02\x02\xE0\xD3\x03\x02\x02\x02\xE0\xD6\x03\x02\x02\x02\xE0\xDA\x03\x02' +
    '\x02\x02\xE1@\x03\x02\x02\x02\xE2\xE4\t\b\x02\x02\xE3\xE2\x03\x02\x02' +
    '\x02\xE4\xE5\x03\x02\x02\x02\xE5\xE3\x03\x02\x02\x02\xE5\xE6\x03\x02\x02' +
    '\x02\xE6B\x03\x02\x02\x02\xE7\xEB\t\t\x02\x02\xE8\xEA\t\n\x02\x02\xE9' +
    '\xE8\x03\x02\x02\x02\xEA\xED\x03\x02\x02\x02\xEB\xE9\x03\x02\x02\x02\xEB' +
    '\xEC\x03\x02\x02\x02\xECD\x03\x02\x02\x02\xED\xEB\x03\x02\x02\x02\xEE' +
    '\xF1\x05C"\x02\xEF\xF1\x05A!\x02\xF0\xEE\x03\x02\x02\x02\xF0\xEF\x03' +
    '\x02\x02\x02\xF1F\x03\x02\x02\x02\xF2\xF4\t\v\x02\x02\xF3\xF2\x03\x02' +
    '\x02\x02\xF4\xF5\x03\x02\x02\x02\xF5\xF3\x03\x02\x02\x02\xF5\xF6\x03\x02' +
    '\x02\x02\xF6\xF7\x03\x02\x02\x02\xF7\xF8\b$\x02\x02\xF8H\x03\x02\x02\x02' +
    '\x12\x02\x9F\xAA\xAF\xB2\xB7\xBB\xC0\xC2\xC8\xCA\xE0\xE5\xEB\xF0\xF5\x03' +
    '\b\x02\x02'
  public static __ATN: ATN
  public static get _ATN(): ATN {
    if (!CalcLexer.__ATN) {
      CalcLexer.__ATN = new ATNDeserializer().deserialize(
        Utils.toCharArray(CalcLexer._serializedATN)
      )
    }

    return CalcLexer.__ATN
  }
}
